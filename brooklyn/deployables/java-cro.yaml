name: 'Hoodie Shop :: App'
location: 'terraform-local:0.1.0-SNAPSHOT'
iconUrl: https://github.com/cloudsoft/demos/raw/master/icons/hoodie-shop.png
services:
  - type: terraform
    id: hoodie-db
    name: 'Hoodie Shop :: Database'
    iconUrl: https://github.com/cloudsoft/amp-demos-artifacts/raw/master/icons/fabric-db.png
    brooklyn.config:
      tf.search: 'true'
      tf.execution.mode: ssh
      tf.configuration.url: $brooklyn:external("terraform", "local.database.url")
      tf_var.hoodie_db_namespace: $brooklyn:location().config("namespace")
      tf_var.aws_account: $brooklyn:location().config("awsAccount")
    brooklyn.initializers:
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: db.host
          description: Extracts the external host where the Database is available (using kubectl)
          targetType: string # default type , we support maps
          shell.env:
            NAMESPACE_NAME: $brooklyn:location().config("namespace")
          command: kubectl get -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' services hoodie-db --namespace=${NAMESPACE_NAME}
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: db.port
          description: Extracts the external port where the Database is available (using kubectl)
          targetType: string
          shell.env:
            NAMESPACE_NAME: $brooklyn:location().config("namespace")
          command: kubectl get -o jsonpath='{.spec.ports[0].nodePort}' services hoodie-db --namespace=${NAMESPACE_NAME}
  - type: terraform
    id: hoodie-backend
    name: 'Hoodie Shop :: Backend'
    iconUrl: https://github.com/cloudsoft/amp-demos-artifacts/raw/master/icons/fabric-backend.png
    brooklyn.config:
      tf.search: 'true'
      tf.execution.mode: ssh
      tf.configuration.url: $brooklyn:external("terraform", "local.backend.url")
      tf_var.hoodie_backend_namespace: $brooklyn:location().config("namespace")
      tf_var.aws_account: $brooklyn:location().config("awsAccount")
      tf_var.hoodie_db_host: $brooklyn:entity("hoodie-db").attributeWhenReady("tf.output.hoodie_db_host_internal")
      tf_var.hoodie_db_port: $brooklyn:entity("hoodie-db").attributeWhenReady("tf.output.hoodie_db_port_internal")
    brooklyn.initializers:
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: backend.host
          description: Extracts the external host where the Backend is available (using kubectl)
          targetType: string
          shell.env:
            NAMESPACE_NAME: $brooklyn:location().config("namespace")
          command: kubectl get -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' services hoodie-backend --namespace=${NAMESPACE_NAME}
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: backend.port
          description: Extracts the external port where the Backend is available (using kubectl)
          targetType: string
          shell.env:
            NAMESPACE_NAME: $brooklyn:location().config("namespace")
          command: kubectl get -o jsonpath='{.spec.ports[0].nodePort}' services hoodie-backend --namespace=${NAMESPACE_NAME}
    brooklyn.enrichers:
      # publish the URL as a sensor; the GUI will pick this up (main.uri)
      - type: org.apache.brooklyn.enricher.stock.Transformer
        brooklyn.config:
          uniqueTag: url-generator
          enricher.triggerSensors:
              - $brooklyn:sensor("backend.host")
              - $brooklyn:sensor("backend.port")
          enricher.targetSensor: $brooklyn:sensor("main.uri")
          enricher.targetValue:
            $brooklyn:formatString:
              - "http://%s:%s/catalogue/health"
              - $brooklyn:attributeWhenReady("backend.host")
              - $brooklyn:attributeWhenReady("backend.port")
  - type: terraform
    id: hoodie-frontend
    name: 'Hoodie Shop :: Frontend'
    iconUrl: https://github.com/cloudsoft/amp-demos-artifacts/raw/master/icons/fabric-frontend.png
    brooklyn.config:
      tf.search: 'true'
      tf.execution.mode: ssh
      tf.configuration.url: $brooklyn:external("terraform", "local.frontend.url")
      tf_var.hoodie_frontend_namespace: $brooklyn:location().config("namespace")
      tf_var.aws_account: $brooklyn:location().config("awsAccount")
      tf_var.hoodie_backend_host: $brooklyn:entity("hoodie-backend").attributeWhenReady("backend.host")
      tf_var.hoodie_backend_port: $brooklyn:entity("hoodie-backend").attributeWhenReady("backend.port")
    brooklyn.initializers:
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: frontend.host
          description: Extracts the external host where the Frontend is available (using kubectl)
          targetType: string
          shell.env:
            NAMESPACE_NAME: $brooklyn:location().config("namespace")
          command: kubectl get -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' services hoodie-frontend --namespace=${NAMESPACE_NAME}
      - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
        brooklyn.config:
          name: frontend.port
          description: Extracts the external port where the Frontend is available (using kubectl)
          targetType: string
          shell.env:
            NAMESPACE_NAME: $brooklyn:location().config("namespace")
          command: kubectl get -o jsonpath='{.spec.ports[0].nodePort}' services hoodie-frontend --namespace=${NAMESPACE_NAME}
    brooklyn.enrichers:
      # publish the URL as a sensor; the GUI will pick this up (main.uri)
      - type: org.apache.brooklyn.enricher.stock.Transformer
        brooklyn.config:
          uniqueTag: url-generator
          enricher.triggerSensors:
            - $brooklyn:sensor("frontend.host")
            - $brooklyn:sensor("frontend.port")
          enricher.targetSensor: $brooklyn:sensor("main.uri")
          enricher.targetValue:
            $brooklyn:formatString:
              - "http://%s:%s/catalog"
              - $brooklyn:attributeWhenReady("frontend.host")
              - $brooklyn:attributeWhenReady("frontend.port")
  - type: org.apache.brooklyn.entity.group.DynamicGroup
    name: K8s Deployments
    brooklyn.config:
      dynamicgroup.entityfilter:
        $brooklyn:object:
          type: terraform-predicate-resource-type
          constructor.args:
            - "kubernetes_deployment_v1"
brooklyn.initializers:
  - type: org.apache.brooklyn.core.effector.ssh.SshCommandEffector
    brooklyn.config:
      name: clean-up
      description: Deletes & recreates the namespace
      shell.env:
        NAMESPACE_NAME: $brooklyn:location().config("namespace")
      command:  kubectl delete namespace ${NAMESPACE_NAME} && kubectl create namespace ${NAMESPACE_NAME}