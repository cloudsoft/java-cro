brooklyn.catalog:
  version: 0.0.1-SNAPSHOT
  iconUrl: classpath://icons/hoodie-shop.png
  publish:
    name: AWS EKS Hoodie Shop Types
    description: Items specific to various Hoodie App tier for an app deployed to AWS EKS

  items:
    # Terraform custom type for creating a Hoodie MariaDB container
    - id: eks-database-tf
      item:
        type: terraform
        name: 'Hoodie Shop :: Database'
        iconUrl: classpath://icons/eks-hoodie-db.png
        brooklyn.config:
          tf.search: 'true'
          tf.execution.mode: ssh
          tf.configuration.url: $brooklyn:external("terraform", "local.database.url")
          tf_var.service_type: "LoadBalancer"
          tf_var.image_version: "1.1"
          tf_var.hoodie_db_namespace: $brooklyn:location().config("namespace")
          tf_var.aws_account: $brooklyn:location().config("awsAccount") # not needed, but declared here to make type reusable
        brooklyn.initializers:
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: db.host
              description: Extracts the external host where the Database is available (using kubectl)
              targetType: string
              shell.env:
                NAMESPACE_NAME: $brooklyn:location().config("namespace")
              command: kubectl get -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' services hoodie-db --namespace=${NAMESPACE_NAME}
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: db.port
              description: Extracts the external port where the Database is available (using kubectl)
              targetType: string
              shell.env:
                NAMESPACE_NAME: $brooklyn:location().config("namespace")
              command: kubectl get -o jsonpath='{.spec.ports[0].nodePort}' services hoodie-db --namespace=${NAMESPACE_NAME}
        brooklyn.enrichers:
          # publish the URL as a sensor; the GUI will pick this up (main.uri)
          - type: org.apache.brooklyn.enricher.stock.Transformer
            brooklyn.config:
              uniqueTag: url-generator
              enricher.triggerSensors:
                - $brooklyn:sensor("db.host")
                - $brooklyn:sensor("tf.output.hoodie_db_port_internal")
              enricher.targetSensor: $brooklyn:sensor("main.uri")
              enricher.targetValue:
                $brooklyn:formatString:
                  - "jdbc:mariadb://%s:%s/hoodiedb"
                  - $brooklyn:attributeWhenReady("db.host")
                  - $brooklyn:attributeWhenReady("tf.output.hoodie_db_port_internal")

    # Terraform custom type for creating a Hoodie Backend container
    - id: eks-backend-tf
      item:
        type: terraform
        name: 'Hoodie Shop :: Backend'
        iconUrl: classpath://icons/eks-hoodie-backend.png
        brooklyn.config:
          tf.search: 'true'
          tf.execution.mode: ssh
          tf.configuration.url: $brooklyn:external("terraform", "local.backend.url")
          tf_var.service_type: "LoadBalancer"
          tf_var.image_version: "1.1"
          tf_var.hoodie_backend_namespace: $brooklyn:location().config("namespace")
          tf_var.aws_account: $brooklyn:location().config("awsAccount") # not needed, but declared here to make type reusable
          shell.env:
            TF_VAR_hoodie_db_host: $brooklyn:config("hoodiedb_url")
            TF_VAR_hoodie_db_port: $brooklyn:config("hoodiedb_port")
            TF_VAR_suffix: $brooklyn:attributeWhenReady("entity.id")
        brooklyn.initializers:
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: backend.host
              description: Extracts the external host where the Backend is available (using kubectl)
              targetType: string
              shell.env:
                NAMESPACE_NAME: $brooklyn:location().config("namespace")
                SERVICE_NAME: $brooklyn:attributeWhenReady("tf.output.hoodie_backend_service_name")
              command: kubectl get -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' services ${SERVICE_NAME} --namespace=${NAMESPACE_NAME}
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: backend.port
              description: Extracts the external port where the Backend is available (using kubectl)
              targetType: string
              shell.env:
                NAMESPACE_NAME: $brooklyn:location().config("namespace")
                SERVICE_NAME: $brooklyn:attributeWhenReady("tf.output.hoodie_backend_service_name")
              command: kubectl get -o jsonpath='{.spec.ports[0].nodePort}' services ${SERVICE_NAME} --namespace=${NAMESPACE_NAME}
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: actuator.jvm.memory.used
              description: The amount of used memory(extracted every 5s from Actuator metrics)
              targetType: string
              period: 5s
              suppressDuplicates: true
              onlyIfServiceUp: true
              shell.env:
                ACTUATOR_URL: $brooklyn:attributeWhenReady("main.uri")
              command: curl -s  ${ACTUATOR_URL}/metrics/jvm.memory.used | jq '.measurements[0] .value'| awk '{ print $1 / (1024*1024) " MB"}'
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: actuator.process.cpu.usage
              description: The recent cpu usage for the JVM process(extracted every 5s from Actuator metrics)
              targetType: string
              period: 5s
              suppressDuplicates: true
              onlyIfServiceUp: true
              shell.env:
                ACTUATOR_URL: $brooklyn:attributeWhenReady("main.uri")
              command: curl -s  ${ACTUATOR_URL}/metrics/process.cpu.usage | jq '.measurements[0] .value' | awk '{ print $1 * 100  " %CPU"  }'
        brooklyn.enrichers:
          # publish the Actuator URL; the GUI will pick this up (main.uri)
          - type: org.apache.brooklyn.enricher.stock.Transformer
            brooklyn.config:
              uniqueTag: url-generator
              enricher.triggerSensors:
                - $brooklyn:sensor("backend.host")
                - $brooklyn:sensor("tf.output.hoodie_backend_port_internal")
              enricher.targetSensor: $brooklyn:sensor("main.uri")
              enricher.targetValue:
                $brooklyn:formatString:
                  - "http://%s:%s/catalogue/actuator"
                  - $brooklyn:attributeWhenReady("backend.host")
                  - $brooklyn:attributeWhenReady("tf.output.hoodie_backend_port_internal")
    # Terraform custom type for creating a Hoodie Frontend container
    - id: eks-frontend-tf
      item:
        type: terraform
        name: 'Hoodie Shop :: Frontend'
        iconUrl: classpath://icons/eks-hoodie-frontend.png
        brooklyn.config:
          tf.search: 'true'
          tf.execution.mode: ssh
          tf.configuration.url: $brooklyn:external("terraform", "local.frontend.url")
          tf_var.service_type: "LoadBalancer"
          tf_var.image_version: "1.1"
          tf_var.hoodie_frontend_namespace: $brooklyn:location().config("namespace")
          tf_var.aws_account: $brooklyn:location().config("awsAccount") # not needed, but declared here to make type reusable
          shell.env:
            TF_VAR_hoodie_backend_host: $brooklyn:config("hoodie_backend_url")
            TF_VAR_hoodie_backend_port: $brooklyn:config("hoodie_backend_port")
        brooklyn.initializers:
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: frontend.host
              description: Extracts the external host where the Frontend is available (using kubectl)
              targetType: string
              shell.env:
                NAMESPACE_NAME: $brooklyn:location().config("namespace")
              command: kubectl get -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' services hoodie-frontend --namespace=${NAMESPACE_NAME}
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: frontend.port
              description: Extracts the external port where the Frontend is available (using kubectl)
              targetType: string
              shell.env:
                NAMESPACE_NAME: $brooklyn:location().config("namespace")
              command: kubectl get -o jsonpath='{.spec.ports[0].nodePort}' services hoodie-frontend --namespace=${NAMESPACE_NAME}
          ### this sensor right here lets you know when the LB is active and the UI is reachable, because AWS is slow ;)
          - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor
            brooklyn.config:
              name: application.ready
              shell.env:
                UI_URL: $brooklyn:attributeWhenReady("main.uri")
              command: if curl -s "${UI_URL}" > /dev/null ; then echo "READY" ;else echo "NOY READY" ; fi
              period: 5s
              targetType: String
        brooklyn.enrichers:
          # publish the URL as a sensor; the GUI will pick this up (main.uri)
          - type: org.apache.brooklyn.enricher.stock.Transformer
            brooklyn.config:
              uniqueTag: url-generator
              enricher.triggerSensors:
                - $brooklyn:sensor("frontend.host")
                - $brooklyn:sensor("tf.output.hoodie_frontend_port_internal")
              enricher.targetSensor: $brooklyn:sensor("main.uri")
              enricher.targetValue:
                $brooklyn:formatString:
                  - "http://%s:%s/catalog"
                  - $brooklyn:attributeWhenReady("frontend.host")
                  - $brooklyn:attributeWhenReady("tf.output.hoodie_frontend_port_internal")
